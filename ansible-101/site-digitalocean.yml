#
# Provision current infrastructure on digitalocean
#   $ export DO_API_TOKEN=xxxx
#   $ ansible-playbook -v site-digitalocean.yml
#
# This will output a series of jupyter urls with their associate ips.
#
# BEWARE: unless you populate accordingly the digital_ocean droplet ids
#         the digital_ocean module will create those droplets over and
#         over again.
#
- hosts: localhost
  gather_facts: false
  vars:
    oauth_token: "{{ lookup('ansible.builtin.env', 'DO_API_TOKEN') }}"

  tasks:
  - name: Retrieve ssh key id.
    community.digitalocean.digital_ocean_sshkey_info:
      oauth_token: "{{ oauth_token }}"
    register: ssh_keys
    check_mode: no

  - name: Set facts based on the gathered information
    set_fact:
      do_key: "{{ item }}"
    loop: "{{ ssh_keys.data | community.general.json_query(ssh_pubkey) }}"
    vars:
      ssh_pubkey: "[?name=='rpolli-ed25519']"

  - name: Create enough machine for the course.
    community.digitalocean.digital_ocean_droplet:
      state: present
      name: "{{item}}"
      unique_name: yes
      ssh_keys:
      - "{{ do_key.fingerprint }}"
      size: s-2vcpu-4gb
      region: fra1
      image: docker-18-04
      wait_timeout: 500
      user_data: "{{ lookup('file', 'cloudinit.txt') }}" # b64encode is not needed in Ansible
    register: my_droplet
    with_items:
    - deleteme-1
#    - deleteme-2

  - name: Dynamically add the new servers to the inventory.
    add_host:
      hostname: >-
        {{ item.data.droplet.networks.v4 | community.general.json_query(jq) | first }}
      groups:
      - do
      ansible_user: root
      host_key_checking: no
    with_items: "{{my_droplet.results}}"
    vars:
      jq: "[?(@.type=='public')].ip_address"

  - name: Create a sample inventory file with the server ips.
    file:
      path: /tmp/inventory.do
      state: absent
  - lineinfile:
      path: /tmp/inventory.do
      create: yes
      line: "[do]"
  - lineinfile:
      path: /tmp/inventory.do
      line: >
        {{ item.data.droplet.networks.v4 | community.general.json_query(jq) | first }} droplet_id={{item.data.droplet.id}}
    with_items: "{{my_droplet.results}}"
    vars:
      jq: "[?(@.type=='public')].ip_address"

#
# Configure the newly created machines
#
- hosts: do
  tags:
  - setup
  vars:
  - ansible_python_interpreter: /usr/bin/python3
  - ansible_user: root
  environment:
  - ANSIBLE_HOST_KEY_CHECKING: False
  tasks:
  - ping:
  - block:
    - name: Docker should listen on localhost.
      lineinfile:
        path: /etc/systemd/system/multi-user.target.wants/docker.service
        regexp: "^ExecStart=.*"
        line: "ExecStart=/usr/bin/dockerd -H fd:// -H tcp://172.17.0.1:2375"
      register: systemd_updated

    - name: Install make
      apt: name=make

    - name: Reload docker with new systemd config
      systemd:
        state: restarted
        name: docker
        daemon_reload: yes

    - name: Check socket
      shell: |
        ss -tlnp | grep 2375

    - name: Download course
      git:
        repo: https://github.com/ioggstream/python-course.git
        version: ansible-2023
        dest: /root/python-course
      ignore_errors: true

    - name: Make it
      shell: |
        make course
      args:
       chdir: /root/python-course/ansible-101
      register: output

    - debug:
        var: output
    when: true  # droplet_id|default(0) != 0
